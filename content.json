{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"koberichard","url":"http://yoursite.com"},"pages":[{"title":"2","date":"2017-08-29T07:04:10.000Z","updated":"2017-08-29T07:04:10.360Z","comments":true,"path":"2/index.html","permalink":"http://yoursite.com/2/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-08-31T05:34:59.000Z","updated":"2017-08-31T05:34:59.879Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"关于me","date":"2017-08-29T03:23:46.000Z","updated":"2017-08-30T07:22:51.905Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"关于一个梦 正在做 历程 兴趣爱好 Q&amp;A"},{"title":"分类 & 标签","date":"2017-08-29T03:23:56.000Z","updated":"2017-08-30T09:40:19.361Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"mysql中mysqldump命令说明","slug":"5","date":"2017-08-30T05:06:22.000Z","updated":"2017-08-30T05:39:58.022Z","comments":true,"path":"2017/08/30/5/","link":"","permalink":"http://yoursite.com/2017/08/30/5/","excerpt":"","text":"mysql中mysqldump命令说明 查看指定的存储过程内容： select body from mysql.proc where name=&#39;procedurename&#39;; 查看所有的存储过程： show procedure status; 导出MySQL的存储过程 mysqldump -uroot -p -hlocalhost -P3306 -n -d -t -R DBName &gt; procedurename.sql 参数说明： -n: --no-create-db -d: --no-data -t: --no-create-info -R: --routines Dump stored routines (functions and procedures) 主要参数介绍： 字符集选项 --default--character-set=xx 连接选项 -u,--user=name -p,--password=name -h,--host=name -P,--port=# 输出内容选项 --add-drop-database --add-drop-table -n;--no-create-db -d;--no-data -t;--no-create-info 输出格式选项 --compact -c --complete-insert -T（指定数据表中的数据备份为单纯的数据文件和建表SQL两个文件） 注xx.sql建表文件是以linux的root用户创建， 而xx.txt文件则是一linux的mysql用户创建， 因此这两个文件的存放路径一定要保证mysql用户有读写创建文件的权限。 --fields-terminated-by=name（域分隔符） --fields-enclosed-by=name（域引用符） --fields-optionally-enclosed-by=name（域引用可选字符） --fields-escaped-by=name(转义字符) 其他 -F --flush-logs（备份前刷新日志） -l --lock-tables(给所有的表加读锁) 1.导出整个数据库 mysqldump -u用户名 -p密码 数据库名 &gt; 导出的文件名 2.导出一个表，包括表结构和数据 mysqldump -u用户名 -p 密码 数据库名 表名&gt; 导出的文件名 3.导出一个数据库结构 mysqldump -u用户名 -p 密码 -d 数据库名 &gt; 导出的文件名 4.导出一个表，只有表结构 mysqldump -u用户名 -p 密码 -d 数据库名 表名&gt; 导出的文件名 导入MySQL的存储过程 mysql -hhostname -uusername - ppassword databasename &lt; backupfile.sql","categories":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/categories/mysql/"}],"tags":[{"name":"mysql 数据库","slug":"mysql-数据库","permalink":"http://yoursite.com/tags/mysql-数据库/"}]},{"title":"Hexo 最常用的几个命令","slug":"common-hexo-commands","date":"2017-08-29T14:12:04.000Z","updated":"2017-08-30T05:07:29.920Z","comments":true,"path":"2017/08/29/common-hexo-commands/","link":"","permalink":"http://yoursite.com/2017/08/29/common-hexo-commands/","excerpt":".article-entry h2 { border-bottom: none; } Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:","text":".article-entry h2 { border-bottom: none; } Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个: hexo s1hexo s 启动本地服务器，用于预览主题。默认地址： http://localhost:4000/ hexo s 是 hexo server 的缩写，命令效果一致； 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可； 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。 hexo n1hexo n &quot;学习笔记 六&quot; 新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些； hexo n 是 hexo new 的缩写，命令效果一致。 hexo d1hexo d 自动生成网站静态文件，并部署到设定的仓库。 hexo d 是 hexo deploy 的缩写，命令效果一致。 hexo clean1hexo clean 清除缓存文件 db.json 和已生成的静态文件 public。 网站显示异常时可以执行这条命令试试。 hexo g1hexo g 生成网站静态文件到默认设置的 public 文件夹。 便于查看网站生成的静态文件或者手动部署网站； 如果使用自动部署，不需要先执行该命令； hexo g 是 hexo generate 的缩写，命令效果一致。 hexo n page1hexo n page aboutme 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/ 标题可以为中文，但一般习惯用英文； 页面标题和文章一样可以随意修改； 页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。 常用组合12hexo clean &amp;&amp; hexo shexo clean &amp;&amp; hexo d 可以用输入法等软件为这些命令设置快捷键，方便调用。 相关说明 以上命令使用基于 Hexo 3.1.1 版本； 需要删掉用命令新建的文章或页面时，只需要进入 Hexo 根目录下的 source 文件夹，删除对应文件或文件夹即可； 更多命令用法请查询 官方文档。","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"为Hexo博客添加目录","slug":"3","date":"2017-08-29T10:24:37.000Z","updated":"2017-08-30T06:46:45.492Z","comments":true,"path":"2017/08/29/3/","link":"","permalink":"http://yoursite.com/2017/08/29/3/","excerpt":"","text":"为Hexo博客添加目录 Hexo博客系统的核心支持生成目录（Table of Contents），但其默认的主题Landscape并不支持目录的显示。我们只需对Landscape的主题文件稍作修改并添加一点目录的CSS就可以在文章前面显示友好的目录了。 修改Landscape主题的ejs文件 我们首先要编辑文章显示页面的模板，也就是themes/landscape/layout/_partial/article.ejs文件。为了将目录生成在正文之前，我们首先在这个文件中找到&lt;%- post.content %&gt;，并在这一行之前加入如下代码： &lt;!-- Table of Contents --&gt; &lt;% if (!index &amp;&amp; post.toc){ %&gt; &lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt; &lt;strong class=&quot;toc-title&quot;&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt; &lt;% } % 这段代码的含义清晰明了，if语句中有两个条件，!index是为了不在首页的文章摘要中生成目录，post.toc确保了只在显式地标记了toc: true的文章中生成目录。若这两个条件满足，则创建一个目录的。 修改完这个文件之后，找一篇包含了多个子标题的文章，并在文章开头的front-matter中添加一句toc: true，在浏览器中访问这篇文章，应该可以看到文章的开头处已经有了带链接的目录。但是这样的目录实在太难看，我们还需要添加相应的CSS来将其指定为我们想要的样式。 为目录编写CSS文件 要指定目录的样式，我们要修改的文件是themes/landscape/source/css/_partial/article.styl。在文件的最后，添加如下代码： /*toc*/ .toc-article background #eee border 1px solid #bbb border-radius 10px margin 1.5em 0 0.3em 1.5em padding 1.2em 1em 0 1em max-width 28% .toc-title font-size 120% #toc line-height 1em font-size 0.9em float right .toc padding 0 margin 1em line-height 1.8em li list-style-type none .toc-child margin-left 1em 第一段的toc-article指定了目录整个的背景色、边框色、倒角半径、各种间距以及最大的宽度。注意这里最好指定目录的最大宽度，我将其设为了28%，也就是文章正文那个框的宽度的28%，也可以设为一个固定的长度，比如在笔记本电脑上16em就是个不错的宽度，但为了能适配各种不同尺寸的屏幕，最好还是设置为百分比。如果不指定最大宽度，遇到比较长的标题时，生成的目录会非常难看。这个最大宽度的设置是我在网上其他添加目录的方法中没有见到的。 第二段的toc-title指的就是“文章目录”那四个字，这四个字要比其他字大一些，将其字号设为其他字的120%。 第三段的#toc.toc指定了目录列表的一些细节，将font-size设为0.9em会让目录的字比文章的字稍小一些。最后的.toc-child指定了二级目录的缩进量。 再次生成页面，应该已经可以显示比较美观的目录了。 收尾工作 通常情况下我们不需要为每一篇文章都添加目录，因为大部分文章的长度还是相对较短，或者结构简单而没有添加小标题。在我的博客上，需要添加目录的长文还是相对较少的。因为我选择了默认不生成目录，而手动为需要目录的文章添加显式地标记。 下面我就需要编辑每一篇需要添加目录的文章，在文章开头的front-matter中加入toc: true。","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"基于hexo+github的博客迁移","slug":"22","date":"2017-08-29T04:24:37.000Z","updated":"2017-08-29T10:28:02.674Z","comments":true,"path":"2017/08/29/22/","link":"","permalink":"http://yoursite.com/2017/08/29/22/","excerpt":"","text":"hexo官方给了一些迁移的方法，不过它上面介绍的方法都是把博客文章从hexo系统迁移到其他博客系统的方法。然而我们这里要讨论的是： 当我们更换电脑的时候我们应该怎么办？ 所以默认你已经成功利用hexo和github发布博客，如果还没有，可以看一下教程 具体的思路是：在生成的已经推到github上的hexo静态代码出建立一个分支，利用这个分支来管理自己hexo的源文件。 如果能在刚刚配置hexo的时候就想好以后的迁移的问题就太好了，可以省掉很多麻烦，可实际使用中，刚刚配置hexo的时候，好多人都是初学，不会想到以后的问题，我就是这样的。 具体的操作： 克隆gitHub上面生成的静态文件到本地 git clone https://github.com/yourname/hexo-test.github.io.git 把克隆到本地的文件除了git的文件都删掉，找不到git的文件的话就到删了吧。不要用hexo init初始化。 将之前使用hexo写博客时候的整个目录（所有文件）搬过来。把该忽略的文件忽略了 touch .gitignore 创建一个叫hexo的分支 git checkout -b hexo提交复制过来的文件到暂存区 git add --all 提交 git commit -m &quot;新建分支源文件&quot; 推送分支到github git push --set-upstream origin hexo 到这里基本上就搞定了，以后再推就可以直接git push了，hexo的操作跟以前一样。 今后无论什么时候想要在其他电脑上面用hexo写博客，就直接把创建的分支克隆下来，npm install安装依赖之后就可以用了。 克隆分支的操作 git clone -b hexo https://github.com/yourname/hexo-test.github.io.git 因为上面创建的是一个名字叫hexo的分支，所以这里-b后面的是hexo，再把后面的gitHub的地址换成你自己的hexo博客的地址就可以了。 这样做完了以后，每次写完博客发布之后不要忘了还要git push把源文件推到分支上。 博客：https://zhuanyongxigua.github.io 转载自：作者：砖用冰西瓜链接：http://www.jianshu.com/p/beb8d611340a","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"基于hexo+github搭建一个独立博客","slug":"article_20180829-1","date":"2017-08-29T04:24:37.000Z","updated":"2017-08-29T09:37:26.385Z","comments":true,"path":"2017/08/29/article_20180829-1/","link":"","permalink":"http://yoursite.com/2017/08/29/article_20180829-1/","excerpt":"","text":"#基于hexo+github搭建一个独立博客 一直听说用 hexo 搭建一个拥有自己域名的博客是很酷炫的事情~，在这十一花上半个小时整个hexo博客岂不美哉。 使用Hexo吸引我的是，其简单优雅, 而且风格多变, 适合程序员搭建个人博客,而且支持多平台的搭建，再加上有些node,git基础，分分钟创建出一个高大上的博客。废话少说，开始吧。 准备工作* node：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。 * git: 把本地的hexo内容提交到github上去.没有安装的可以看此教程。 * github：用来做博客的远程创库、域名、服务器。（~不多说了） 然后你还要知道一点点linux命令，域名解析相关知识（以上条件你都达到了，那么恭喜你30分钟搭建倒计时开始~） 安装Hexo（本人是Mac系统，其他系统的朋友这部分可以看官网教程） 当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令： sudo npm install -g hexo 输入管理员密码即开始安装 初始化 终端cd到一个你选定的目录（比如创建一个blog文件，$cd blog），执行hexo init命令： hexo init 在blog目录下，执行如下命令，安装npm： npm install 执行如下命令，开启hexo服务器： hexo s 此时，浏览器中打开网址http://localhost:4000，能看到如下页面： 本地设置好后，接下来开始关联Github。 创建仓库登录你的Github帐号，新建仓库，名为用户名.github.io固定写法。 本地的blog文件夹下内容为: 1. _config.yml 2. db.json 3. node_modules 4. package.json 5. scaffolds 6. source 7. themes 终端cd到blog文件夹下，vim打开_config.yml，命令如下： $ vim _config.yml 打开后往下滑到最后，修改成下边的样子： deploy: type: git repository: https://github.com/MuYunyun/MuYunyun.github.io.git branch: master 你需要将repository后MuYunyun换成你自己的用户名 $ hexo generate 或者：hexo g 此时若出现如下报错： ERROR Local hexo not found in ~/blog ERROR Try runing: &apos;npm install hexo --save&apos; 则执行命令： npm install hexo --save 若无报错，自行忽略此步骤。 再执行配置命令： $ hexo deploy 或者：hexo d 注意坑三：若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git： $ npm install hexo-deployer-git --save 若你未关联Github，则执行hexo deploy命令时终端会提示你输入Github的用户名和密码，即 &gt; Username for &apos;https://github.com&apos;: &gt; Password for &apos;https://github.com&apos;: hexo deploy命令执行成功后， 浏览器中打开网址http://MuYunyun.github.io（将MuYunyun换成你的用户名）能看到和打开http://localhost:4000时一样的页面。 为避免每次输入Github用户名和密码的麻烦，可参照第二节方法 添加ssh key到Github1. 检查SSH keys是否存在Github 执行如下命令，检查SSH keys是否存在。如果有文件id_rsa.pub或id_dsa.pub，则直接进入步骤1.3将SSH key添加到Github中，否则进入下一步生成SSH key。 $ ls -al ~/.ssh 2. 生成新的ssh key 执行如下命令生成public/private rsa key pair，注意将your_email@example.com换成你自己注册Github的邮箱地址。 $ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 默认会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件。 3. 将ssh key添加到Github中 Find前往文件夹~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。 进入Github --&gt; Settings --&gt; SSH keys --&gt; add SSH key: Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。 发布文章终端cd到blog文件夹下，执行如下命令新建文章： hexo new &quot;postName&quot; 名为postName.md的文件会建在目录/blog/source/_posts下。 文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布: hexo generate //生成静态页面 hexo deploy//将文章部署到Github 安装theme你可以到Hexo官网主题页去搜寻自己喜欢的theme。这里以hexo-theme-next为例 终端cd到 blog 目录下执行如下命令： $ git clone https://github.com/iissnan/hexo-theme-next themes/next 将blog目录下_config.yml里theme的名称landscape修改为next 终端cd到blog目录下执行如下命令(每次部署文章的步骤)： $ hexo clean //清除缓存文件 (db.json) 和已生成的静态文件 (public) $ hexo g //生成缓存和静态文件 $ hexo d //重新部署到服务器 至于更改theme内容，比如名称，描述，头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可，不要忘记冒号:后加空格。NexT 使用文档里有极详细的介绍。 绑定个人域名首先假设你有一个域名并且是可用状态。修改你域名的DNS地址为 f1g1ns1.dnspod.net和f1g1ns2.dnspod.net 现在使用的域名是Github提供的二级域名，也可以绑定为自己的个性域名。购买域名，我是在万网买的，可直接在其网站做域名解析。 1.Github端 在/blog/themes/landscape/source目录下新建文件名为：CNAME文件，注意没有后缀名！直接将自己的域名如：muyunyun.cn写入。 终端cd到blog目录下执行如下命令重新部署： $ hexo clean $ hexo g $ hexo d 2.域名解析 如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。登录万网，在你购买的域名后边点击：解析 --&gt; 添加解析 记录类型：CNAME 主机记录：将域名解析为example.com（不带www），填写@或者不填写 记录值：MuYunyun.github.io. (不要忘记最后的.，MuYunyun改为你自己的用户名)，点击保存即可，如下图： ps:万网DNS地址更换貌似需要一段时间才能生效，如果不能访问请晚点或者隔天再访问域名，如果还是不行可能就是出问题了。 铛铛铛，点击MuYunyun.github.io和访问http://muyunyun.cn/访问效果一致 总结和说明github pages虽然免费，但毕竟是国外的服务器，国内访问可以稍微缓慢，如果可以的话，可去买一个支持Node.js的国内云空间即可。可以参考我之前写的 1元搭建自己的云服务器~~搭建好这个博客，满满的成就感。祝大家节日快乐~~","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}